// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/06/2019 18:51:08"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module 4_vlg_sample_tst(
	CLK,
	CLR,
	sampler_tx
);
input  CLK;
input  CLR;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or CLR)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module 4_vlg_check_tst (
	BUS,
	CN,
	CPIR,
	CPMAR,
	CPPC,
	CPR0,
	CPR1,
	G,
	M,
	MA,
	PB,
	PC0,
	PC1,
	PC2,
	PC3,
	PC4,
	PC5,
	PC6,
	PC7,
	R00,
	R01,
	R02,
	R03,
	R10,
	R11,
	R12,
	R13,
	RA,
	RB,
	RD,
	S0,
	S1,
	S2,
	S3,
	T1,
	T2,
	T3,
	T4,
	T5,
	W1,
	W2,
	WR,
	sampler_rx
);
input [7:0] BUS;
input  CN;
input  CPIR;
input  CPMAR;
input  CPPC;
input  CPR0;
input  CPR1;
input  G;
input  M;
input  MA;
input  PB;
input  PC0;
input  PC1;
input  PC2;
input  PC3;
input  PC4;
input  PC5;
input  PC6;
input  PC7;
input  R00;
input  R01;
input  R02;
input  R03;
input  R10;
input  R11;
input  R12;
input  R13;
input  RA;
input  RB;
input  RD;
input  S0;
input  S1;
input  S2;
input  S3;
input  T1;
input  T2;
input  T3;
input  T4;
input  T5;
input  W1;
input  W2;
input  WR;
input sampler_rx;

reg [7:0] BUS_expected;
reg  CN_expected;
reg  CPIR_expected;
reg  CPMAR_expected;
reg  CPPC_expected;
reg  CPR0_expected;
reg  CPR1_expected;
reg  G_expected;
reg  M_expected;
reg  MA_expected;
reg  PB_expected;
reg  PC0_expected;
reg  PC1_expected;
reg  PC2_expected;
reg  PC3_expected;
reg  PC4_expected;
reg  PC5_expected;
reg  PC6_expected;
reg  PC7_expected;
reg  R00_expected;
reg  R01_expected;
reg  R02_expected;
reg  R03_expected;
reg  R10_expected;
reg  R11_expected;
reg  R12_expected;
reg  R13_expected;
reg  RA_expected;
reg  RB_expected;
reg  RD_expected;
reg  S0_expected;
reg  S1_expected;
reg  S2_expected;
reg  S3_expected;
reg  T1_expected;
reg  T2_expected;
reg  T3_expected;
reg  T4_expected;
reg  T5_expected;
reg  W1_expected;
reg  W2_expected;
reg  WR_expected;

reg [7:0] BUS_prev;
reg  CN_prev;
reg  CPIR_prev;
reg  CPMAR_prev;
reg  CPPC_prev;
reg  CPR0_prev;
reg  CPR1_prev;
reg  G_prev;
reg  M_prev;
reg  MA_prev;
reg  PB_prev;
reg  PC0_prev;
reg  PC1_prev;
reg  PC2_prev;
reg  PC3_prev;
reg  PC4_prev;
reg  PC5_prev;
reg  PC6_prev;
reg  PC7_prev;
reg  R00_prev;
reg  R01_prev;
reg  R02_prev;
reg  R03_prev;
reg  R10_prev;
reg  R11_prev;
reg  R12_prev;
reg  R13_prev;
reg  RA_prev;
reg  RB_prev;
reg  RD_prev;
reg  S0_prev;
reg  S1_prev;
reg  S2_prev;
reg  S3_prev;
reg  T1_prev;
reg  T2_prev;
reg  T3_prev;
reg  T4_prev;
reg  T5_prev;
reg  W1_prev;
reg  W2_prev;
reg  WR_prev;

reg [7:0] BUS_expected_prev;
reg  CN_expected_prev;
reg  CPIR_expected_prev;
reg  CPMAR_expected_prev;
reg  CPPC_expected_prev;
reg  CPR0_expected_prev;
reg  CPR1_expected_prev;
reg  G_expected_prev;
reg  M_expected_prev;
reg  MA_expected_prev;
reg  PB_expected_prev;
reg  PC0_expected_prev;
reg  PC1_expected_prev;
reg  PC2_expected_prev;
reg  PC3_expected_prev;
reg  PC4_expected_prev;
reg  PC5_expected_prev;
reg  PC6_expected_prev;
reg  PC7_expected_prev;
reg  R00_expected_prev;
reg  R01_expected_prev;
reg  R02_expected_prev;
reg  R03_expected_prev;
reg  R10_expected_prev;
reg  R11_expected_prev;
reg  R12_expected_prev;
reg  R13_expected_prev;
reg  RA_expected_prev;
reg  RB_expected_prev;
reg  RD_expected_prev;
reg  S0_expected_prev;
reg  S1_expected_prev;
reg  S2_expected_prev;
reg  S3_expected_prev;
reg  T1_expected_prev;
reg  T2_expected_prev;
reg  T3_expected_prev;
reg  T4_expected_prev;
reg  T5_expected_prev;
reg  W1_expected_prev;
reg  W2_expected_prev;
reg  WR_expected_prev;

reg [7:0] last_BUS_exp;
reg  last_CN_exp;
reg  last_CPIR_exp;
reg  last_CPMAR_exp;
reg  last_CPPC_exp;
reg  last_CPR0_exp;
reg  last_CPR1_exp;
reg  last_G_exp;
reg  last_M_exp;
reg  last_MA_exp;
reg  last_PB_exp;
reg  last_PC0_exp;
reg  last_PC1_exp;
reg  last_PC2_exp;
reg  last_PC3_exp;
reg  last_PC4_exp;
reg  last_PC5_exp;
reg  last_PC6_exp;
reg  last_PC7_exp;
reg  last_R00_exp;
reg  last_R01_exp;
reg  last_R02_exp;
reg  last_R03_exp;
reg  last_R10_exp;
reg  last_R11_exp;
reg  last_R12_exp;
reg  last_R13_exp;
reg  last_RA_exp;
reg  last_RB_exp;
reg  last_RD_exp;
reg  last_S0_exp;
reg  last_S1_exp;
reg  last_S2_exp;
reg  last_S3_exp;
reg  last_T1_exp;
reg  last_T2_exp;
reg  last_T3_exp;
reg  last_T4_exp;
reg  last_T5_exp;
reg  last_W1_exp;
reg  last_W2_exp;
reg  last_WR_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:42] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 42'b1;
end

// update real /o prevs

always @(trigger)
begin
	BUS_prev = BUS;
	CN_prev = CN;
	CPIR_prev = CPIR;
	CPMAR_prev = CPMAR;
	CPPC_prev = CPPC;
	CPR0_prev = CPR0;
	CPR1_prev = CPR1;
	G_prev = G;
	M_prev = M;
	MA_prev = MA;
	PB_prev = PB;
	PC0_prev = PC0;
	PC1_prev = PC1;
	PC2_prev = PC2;
	PC3_prev = PC3;
	PC4_prev = PC4;
	PC5_prev = PC5;
	PC6_prev = PC6;
	PC7_prev = PC7;
	R00_prev = R00;
	R01_prev = R01;
	R02_prev = R02;
	R03_prev = R03;
	R10_prev = R10;
	R11_prev = R11;
	R12_prev = R12;
	R13_prev = R13;
	RA_prev = RA;
	RB_prev = RB;
	RD_prev = RD;
	S0_prev = S0;
	S1_prev = S1;
	S2_prev = S2;
	S3_prev = S3;
	T1_prev = T1;
	T2_prev = T2;
	T3_prev = T3;
	T4_prev = T4;
	T5_prev = T5;
	W1_prev = W1;
	W2_prev = W2;
	WR_prev = WR;
end

// update expected /o prevs

always @(trigger)
begin
	BUS_expected_prev = BUS_expected;
	CN_expected_prev = CN_expected;
	CPIR_expected_prev = CPIR_expected;
	CPMAR_expected_prev = CPMAR_expected;
	CPPC_expected_prev = CPPC_expected;
	CPR0_expected_prev = CPR0_expected;
	CPR1_expected_prev = CPR1_expected;
	G_expected_prev = G_expected;
	M_expected_prev = M_expected;
	MA_expected_prev = MA_expected;
	PB_expected_prev = PB_expected;
	PC0_expected_prev = PC0_expected;
	PC1_expected_prev = PC1_expected;
	PC2_expected_prev = PC2_expected;
	PC3_expected_prev = PC3_expected;
	PC4_expected_prev = PC4_expected;
	PC5_expected_prev = PC5_expected;
	PC6_expected_prev = PC6_expected;
	PC7_expected_prev = PC7_expected;
	R00_expected_prev = R00_expected;
	R01_expected_prev = R01_expected;
	R02_expected_prev = R02_expected;
	R03_expected_prev = R03_expected;
	R10_expected_prev = R10_expected;
	R11_expected_prev = R11_expected;
	R12_expected_prev = R12_expected;
	R13_expected_prev = R13_expected;
	RA_expected_prev = RA_expected;
	RB_expected_prev = RB_expected;
	RD_expected_prev = RD_expected;
	S0_expected_prev = S0_expected;
	S1_expected_prev = S1_expected;
	S2_expected_prev = S2_expected;
	S3_expected_prev = S3_expected;
	T1_expected_prev = T1_expected;
	T2_expected_prev = T2_expected;
	T3_expected_prev = T3_expected;
	T4_expected_prev = T4_expected;
	T5_expected_prev = T5_expected;
	W1_expected_prev = W1_expected;
	W2_expected_prev = W2_expected;
	WR_expected_prev = WR_expected;
end


// expected BUS[ 7 ]
initial
begin
	BUS_expected[7] = 1'bX;
end 
// expected BUS[ 6 ]
initial
begin
	BUS_expected[6] = 1'bX;
end 
// expected BUS[ 5 ]
initial
begin
	BUS_expected[5] = 1'bX;
end 
// expected BUS[ 4 ]
initial
begin
	BUS_expected[4] = 1'bX;
end 
// expected BUS[ 3 ]
initial
begin
	BUS_expected[3] = 1'bX;
end 
// expected BUS[ 2 ]
initial
begin
	BUS_expected[2] = 1'bX;
end 
// expected BUS[ 1 ]
initial
begin
	BUS_expected[1] = 1'bX;
end 
// expected BUS[ 0 ]
initial
begin
	BUS_expected[0] = 1'bX;
end 

// expected CN
initial
begin
	CN_expected = 1'bX;
end 

// expected CPIR
initial
begin
	CPIR_expected = 1'bX;
end 

// expected CPMAR
initial
begin
	CPMAR_expected = 1'bX;
end 

// expected CPPC
initial
begin
	CPPC_expected = 1'bX;
end 

// expected CPR0
initial
begin
	CPR0_expected = 1'bX;
end 

// expected CPR1
initial
begin
	CPR1_expected = 1'bX;
end 

// expected G
initial
begin
	G_expected = 1'bX;
end 

// expected M
initial
begin
	M_expected = 1'bX;
end 

// expected MA
initial
begin
	MA_expected = 1'bX;
end 

// expected PB
initial
begin
	PB_expected = 1'bX;
end 

// expected PC0
initial
begin
	PC0_expected = 1'bX;
end 

// expected PC1
initial
begin
	PC1_expected = 1'bX;
end 

// expected PC2
initial
begin
	PC2_expected = 1'bX;
end 

// expected PC3
initial
begin
	PC3_expected = 1'bX;
end 

// expected PC4
initial
begin
	PC4_expected = 1'bX;
end 

// expected PC5
initial
begin
	PC5_expected = 1'bX;
end 

// expected PC6
initial
begin
	PC6_expected = 1'bX;
end 

// expected PC7
initial
begin
	PC7_expected = 1'bX;
end 

// expected R00
initial
begin
	R00_expected = 1'bX;
end 

// expected R01
initial
begin
	R01_expected = 1'bX;
end 

// expected R02
initial
begin
	R02_expected = 1'bX;
end 

// expected R03
initial
begin
	R03_expected = 1'bX;
end 

// expected R10
initial
begin
	R10_expected = 1'bX;
end 

// expected R11
initial
begin
	R11_expected = 1'bX;
end 

// expected R12
initial
begin
	R12_expected = 1'bX;
end 

// expected R13
initial
begin
	R13_expected = 1'bX;
end 

// expected RA
initial
begin
	RA_expected = 1'bX;
end 

// expected RB
initial
begin
	RB_expected = 1'bX;
end 

// expected RD
initial
begin
	RD_expected = 1'bX;
end 

// expected S0
initial
begin
	S0_expected = 1'bX;
end 

// expected S1
initial
begin
	S1_expected = 1'bX;
end 

// expected S2
initial
begin
	S2_expected = 1'bX;
end 

// expected S3
initial
begin
	S3_expected = 1'bX;
end 

// expected T1
initial
begin
	T1_expected = 1'bX;
end 

// expected T2
initial
begin
	T2_expected = 1'bX;
end 

// expected T3
initial
begin
	T3_expected = 1'bX;
end 

// expected T4
initial
begin
	T4_expected = 1'bX;
end 

// expected T5
initial
begin
	T5_expected = 1'bX;
end 

// expected W1
initial
begin
	W1_expected = 1'bX;
end 

// expected W2
initial
begin
	W2_expected = 1'bX;
end 

// expected WR
initial
begin
	WR_expected = 1'bX;
end 
// generate trigger
always @(BUS_expected or BUS or CN_expected or CN or CPIR_expected or CPIR or CPMAR_expected or CPMAR or CPPC_expected or CPPC or CPR0_expected or CPR0 or CPR1_expected or CPR1 or G_expected or G or M_expected or M or MA_expected or MA or PB_expected or PB or PC0_expected or PC0 or PC1_expected or PC1 or PC2_expected or PC2 or PC3_expected or PC3 or PC4_expected or PC4 or PC5_expected or PC5 or PC6_expected or PC6 or PC7_expected or PC7 or R00_expected or R00 or R01_expected or R01 or R02_expected or R02 or R03_expected or R03 or R10_expected or R10 or R11_expected or R11 or R12_expected or R12 or R13_expected or R13 or RA_expected or RA or RB_expected or RB or RD_expected or RD or S0_expected or S0 or S1_expected or S1 or S2_expected or S2 or S3_expected or S3 or T1_expected or T1 or T2_expected or T2 or T3_expected or T3 or T4_expected or T4 or T5_expected or T5 or W1_expected or W1 or W2_expected or W2 or WR_expected or WR)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected BUS = %b | expected CN = %b | expected CPIR = %b | expected CPMAR = %b | expected CPPC = %b | expected CPR0 = %b | expected CPR1 = %b | expected G = %b | expected M = %b | expected MA = %b | expected PB = %b | expected PC0 = %b | expected PC1 = %b | expected PC2 = %b | expected PC3 = %b | expected PC4 = %b | expected PC5 = %b | expected PC6 = %b | expected PC7 = %b | expected R00 = %b | expected R01 = %b | expected R02 = %b | expected R03 = %b | expected R10 = %b | expected R11 = %b | expected R12 = %b | expected R13 = %b | expected RA = %b | expected RB = %b | expected RD = %b | expected S0 = %b | expected S1 = %b | expected S2 = %b | expected S3 = %b | expected T1 = %b | expected T2 = %b | expected T3 = %b | expected T4 = %b | expected T5 = %b | expected W1 = %b | expected W2 = %b | expected WR = %b | ",BUS_expected_prev,CN_expected_prev,CPIR_expected_prev,CPMAR_expected_prev,CPPC_expected_prev,CPR0_expected_prev,CPR1_expected_prev,G_expected_prev,M_expected_prev,MA_expected_prev,PB_expected_prev,PC0_expected_prev,PC1_expected_prev,PC2_expected_prev,PC3_expected_prev,PC4_expected_prev,PC5_expected_prev,PC6_expected_prev,PC7_expected_prev,R00_expected_prev,R01_expected_prev,R02_expected_prev,R03_expected_prev,R10_expected_prev,R11_expected_prev,R12_expected_prev,R13_expected_prev,RA_expected_prev,RB_expected_prev,RD_expected_prev,S0_expected_prev,S1_expected_prev,S2_expected_prev,S3_expected_prev,T1_expected_prev,T2_expected_prev,T3_expected_prev,T4_expected_prev,T5_expected_prev,W1_expected_prev,W2_expected_prev,WR_expected_prev);
	$display("| real BUS = %b | real CN = %b | real CPIR = %b | real CPMAR = %b | real CPPC = %b | real CPR0 = %b | real CPR1 = %b | real G = %b | real M = %b | real MA = %b | real PB = %b | real PC0 = %b | real PC1 = %b | real PC2 = %b | real PC3 = %b | real PC4 = %b | real PC5 = %b | real PC6 = %b | real PC7 = %b | real R00 = %b | real R01 = %b | real R02 = %b | real R03 = %b | real R10 = %b | real R11 = %b | real R12 = %b | real R13 = %b | real RA = %b | real RB = %b | real RD = %b | real S0 = %b | real S1 = %b | real S2 = %b | real S3 = %b | real T1 = %b | real T2 = %b | real T3 = %b | real T4 = %b | real T5 = %b | real W1 = %b | real W2 = %b | real WR = %b | ",BUS_prev,CN_prev,CPIR_prev,CPMAR_prev,CPPC_prev,CPR0_prev,CPR1_prev,G_prev,M_prev,MA_prev,PB_prev,PC0_prev,PC1_prev,PC2_prev,PC3_prev,PC4_prev,PC5_prev,PC6_prev,PC7_prev,R00_prev,R01_prev,R02_prev,R03_prev,R10_prev,R11_prev,R12_prev,R13_prev,RA_prev,RB_prev,RD_prev,S0_prev,S1_prev,S2_prev,S3_prev,T1_prev,T2_prev,T3_prev,T4_prev,T5_prev,W1_prev,W2_prev,WR_prev);
`endif
	if (
		( BUS_expected_prev[0] !== 1'bx ) && ( BUS_prev[0] !== BUS_expected_prev[0] )
		&& ((BUS_expected_prev[0] !== last_BUS_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BUS_exp[0] = BUS_expected_prev[0];
	end
	if (
		( BUS_expected_prev[1] !== 1'bx ) && ( BUS_prev[1] !== BUS_expected_prev[1] )
		&& ((BUS_expected_prev[1] !== last_BUS_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BUS_exp[1] = BUS_expected_prev[1];
	end
	if (
		( BUS_expected_prev[2] !== 1'bx ) && ( BUS_prev[2] !== BUS_expected_prev[2] )
		&& ((BUS_expected_prev[2] !== last_BUS_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BUS_exp[2] = BUS_expected_prev[2];
	end
	if (
		( BUS_expected_prev[3] !== 1'bx ) && ( BUS_prev[3] !== BUS_expected_prev[3] )
		&& ((BUS_expected_prev[3] !== last_BUS_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BUS_exp[3] = BUS_expected_prev[3];
	end
	if (
		( BUS_expected_prev[4] !== 1'bx ) && ( BUS_prev[4] !== BUS_expected_prev[4] )
		&& ((BUS_expected_prev[4] !== last_BUS_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BUS_exp[4] = BUS_expected_prev[4];
	end
	if (
		( BUS_expected_prev[5] !== 1'bx ) && ( BUS_prev[5] !== BUS_expected_prev[5] )
		&& ((BUS_expected_prev[5] !== last_BUS_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BUS_exp[5] = BUS_expected_prev[5];
	end
	if (
		( BUS_expected_prev[6] !== 1'bx ) && ( BUS_prev[6] !== BUS_expected_prev[6] )
		&& ((BUS_expected_prev[6] !== last_BUS_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BUS_exp[6] = BUS_expected_prev[6];
	end
	if (
		( BUS_expected_prev[7] !== 1'bx ) && ( BUS_prev[7] !== BUS_expected_prev[7] )
		&& ((BUS_expected_prev[7] !== last_BUS_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BUS_exp[7] = BUS_expected_prev[7];
	end
	if (
		( CN_expected_prev !== 1'bx ) && ( CN_prev !== CN_expected_prev )
		&& ((CN_expected_prev !== last_CN_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CN :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CN_expected_prev);
		$display ("     Real value = %b", CN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CN_exp = CN_expected_prev;
	end
	if (
		( CPIR_expected_prev !== 1'bx ) && ( CPIR_prev !== CPIR_expected_prev )
		&& ((CPIR_expected_prev !== last_CPIR_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CPIR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CPIR_expected_prev);
		$display ("     Real value = %b", CPIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CPIR_exp = CPIR_expected_prev;
	end
	if (
		( CPMAR_expected_prev !== 1'bx ) && ( CPMAR_prev !== CPMAR_expected_prev )
		&& ((CPMAR_expected_prev !== last_CPMAR_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CPMAR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CPMAR_expected_prev);
		$display ("     Real value = %b", CPMAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_CPMAR_exp = CPMAR_expected_prev;
	end
	if (
		( CPPC_expected_prev !== 1'bx ) && ( CPPC_prev !== CPPC_expected_prev )
		&& ((CPPC_expected_prev !== last_CPPC_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CPPC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CPPC_expected_prev);
		$display ("     Real value = %b", CPPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_CPPC_exp = CPPC_expected_prev;
	end
	if (
		( CPR0_expected_prev !== 1'bx ) && ( CPR0_prev !== CPR0_expected_prev )
		&& ((CPR0_expected_prev !== last_CPR0_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CPR0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CPR0_expected_prev);
		$display ("     Real value = %b", CPR0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_CPR0_exp = CPR0_expected_prev;
	end
	if (
		( CPR1_expected_prev !== 1'bx ) && ( CPR1_prev !== CPR1_expected_prev )
		&& ((CPR1_expected_prev !== last_CPR1_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CPR1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CPR1_expected_prev);
		$display ("     Real value = %b", CPR1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_CPR1_exp = CPR1_expected_prev;
	end
	if (
		( G_expected_prev !== 1'bx ) && ( G_prev !== G_expected_prev )
		&& ((G_expected_prev !== last_G_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_expected_prev);
		$display ("     Real value = %b", G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_G_exp = G_expected_prev;
	end
	if (
		( M_expected_prev !== 1'bx ) && ( M_prev !== M_expected_prev )
		&& ((M_expected_prev !== last_M_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_M_exp = M_expected_prev;
	end
	if (
		( MA_expected_prev !== 1'bx ) && ( MA_prev !== MA_expected_prev )
		&& ((MA_expected_prev !== last_MA_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MA_expected_prev);
		$display ("     Real value = %b", MA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_MA_exp = MA_expected_prev;
	end
	if (
		( PB_expected_prev !== 1'bx ) && ( PB_prev !== PB_expected_prev )
		&& ((PB_expected_prev !== last_PB_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PB :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PB_expected_prev);
		$display ("     Real value = %b", PB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PB_exp = PB_expected_prev;
	end
	if (
		( PC0_expected_prev !== 1'bx ) && ( PC0_prev !== PC0_expected_prev )
		&& ((PC0_expected_prev !== last_PC0_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC0_expected_prev);
		$display ("     Real value = %b", PC0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_PC0_exp = PC0_expected_prev;
	end
	if (
		( PC1_expected_prev !== 1'bx ) && ( PC1_prev !== PC1_expected_prev )
		&& ((PC1_expected_prev !== last_PC1_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC1_expected_prev);
		$display ("     Real value = %b", PC1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_PC1_exp = PC1_expected_prev;
	end
	if (
		( PC2_expected_prev !== 1'bx ) && ( PC2_prev !== PC2_expected_prev )
		&& ((PC2_expected_prev !== last_PC2_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC2_expected_prev);
		$display ("     Real value = %b", PC2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_PC2_exp = PC2_expected_prev;
	end
	if (
		( PC3_expected_prev !== 1'bx ) && ( PC3_prev !== PC3_expected_prev )
		&& ((PC3_expected_prev !== last_PC3_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC3_expected_prev);
		$display ("     Real value = %b", PC3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PC3_exp = PC3_expected_prev;
	end
	if (
		( PC4_expected_prev !== 1'bx ) && ( PC4_prev !== PC4_expected_prev )
		&& ((PC4_expected_prev !== last_PC4_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC4_expected_prev);
		$display ("     Real value = %b", PC4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC4_exp = PC4_expected_prev;
	end
	if (
		( PC5_expected_prev !== 1'bx ) && ( PC5_prev !== PC5_expected_prev )
		&& ((PC5_expected_prev !== last_PC5_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC5_expected_prev);
		$display ("     Real value = %b", PC5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_PC5_exp = PC5_expected_prev;
	end
	if (
		( PC6_expected_prev !== 1'bx ) && ( PC6_prev !== PC6_expected_prev )
		&& ((PC6_expected_prev !== last_PC6_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC6_expected_prev);
		$display ("     Real value = %b", PC6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_PC6_exp = PC6_expected_prev;
	end
	if (
		( PC7_expected_prev !== 1'bx ) && ( PC7_prev !== PC7_expected_prev )
		&& ((PC7_expected_prev !== last_PC7_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC7_expected_prev);
		$display ("     Real value = %b", PC7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_PC7_exp = PC7_expected_prev;
	end
	if (
		( R00_expected_prev !== 1'bx ) && ( R00_prev !== R00_expected_prev )
		&& ((R00_expected_prev !== last_R00_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R00 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R00_expected_prev);
		$display ("     Real value = %b", R00_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_R00_exp = R00_expected_prev;
	end
	if (
		( R01_expected_prev !== 1'bx ) && ( R01_prev !== R01_expected_prev )
		&& ((R01_expected_prev !== last_R01_exp) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R01 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R01_expected_prev);
		$display ("     Real value = %b", R01_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_R01_exp = R01_expected_prev;
	end
	if (
		( R02_expected_prev !== 1'bx ) && ( R02_prev !== R02_expected_prev )
		&& ((R02_expected_prev !== last_R02_exp) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R02 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R02_expected_prev);
		$display ("     Real value = %b", R02_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_R02_exp = R02_expected_prev;
	end
	if (
		( R03_expected_prev !== 1'bx ) && ( R03_prev !== R03_expected_prev )
		&& ((R03_expected_prev !== last_R03_exp) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R03 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R03_expected_prev);
		$display ("     Real value = %b", R03_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_R03_exp = R03_expected_prev;
	end
	if (
		( R10_expected_prev !== 1'bx ) && ( R10_prev !== R10_expected_prev )
		&& ((R10_expected_prev !== last_R10_exp) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R10 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R10_expected_prev);
		$display ("     Real value = %b", R10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_R10_exp = R10_expected_prev;
	end
	if (
		( R11_expected_prev !== 1'bx ) && ( R11_prev !== R11_expected_prev )
		&& ((R11_expected_prev !== last_R11_exp) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R11 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R11_expected_prev);
		$display ("     Real value = %b", R11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_R11_exp = R11_expected_prev;
	end
	if (
		( R12_expected_prev !== 1'bx ) && ( R12_prev !== R12_expected_prev )
		&& ((R12_expected_prev !== last_R12_exp) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R12 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R12_expected_prev);
		$display ("     Real value = %b", R12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_R12_exp = R12_expected_prev;
	end
	if (
		( R13_expected_prev !== 1'bx ) && ( R13_prev !== R13_expected_prev )
		&& ((R13_expected_prev !== last_R13_exp) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R13 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R13_expected_prev);
		$display ("     Real value = %b", R13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_R13_exp = R13_expected_prev;
	end
	if (
		( RA_expected_prev !== 1'bx ) && ( RA_prev !== RA_expected_prev )
		&& ((RA_expected_prev !== last_RA_exp) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RA_expected_prev);
		$display ("     Real value = %b", RA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_RA_exp = RA_expected_prev;
	end
	if (
		( RB_expected_prev !== 1'bx ) && ( RB_prev !== RB_expected_prev )
		&& ((RB_expected_prev !== last_RB_exp) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RB :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RB_expected_prev);
		$display ("     Real value = %b", RB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_RB_exp = RB_expected_prev;
	end
	if (
		( RD_expected_prev !== 1'bx ) && ( RD_prev !== RD_expected_prev )
		&& ((RD_expected_prev !== last_RD_exp) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD_expected_prev);
		$display ("     Real value = %b", RD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_RD_exp = RD_expected_prev;
	end
	if (
		( S0_expected_prev !== 1'bx ) && ( S0_prev !== S0_expected_prev )
		&& ((S0_expected_prev !== last_S0_exp) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S0_expected_prev);
		$display ("     Real value = %b", S0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_S0_exp = S0_expected_prev;
	end
	if (
		( S1_expected_prev !== 1'bx ) && ( S1_prev !== S1_expected_prev )
		&& ((S1_expected_prev !== last_S1_exp) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S1_expected_prev);
		$display ("     Real value = %b", S1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_S1_exp = S1_expected_prev;
	end
	if (
		( S2_expected_prev !== 1'bx ) && ( S2_prev !== S2_expected_prev )
		&& ((S2_expected_prev !== last_S2_exp) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S2_expected_prev);
		$display ("     Real value = %b", S2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_S2_exp = S2_expected_prev;
	end
	if (
		( S3_expected_prev !== 1'bx ) && ( S3_prev !== S3_expected_prev )
		&& ((S3_expected_prev !== last_S3_exp) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S3_expected_prev);
		$display ("     Real value = %b", S3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_S3_exp = S3_expected_prev;
	end
	if (
		( T1_expected_prev !== 1'bx ) && ( T1_prev !== T1_expected_prev )
		&& ((T1_expected_prev !== last_T1_exp) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T1_expected_prev);
		$display ("     Real value = %b", T1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_T1_exp = T1_expected_prev;
	end
	if (
		( T2_expected_prev !== 1'bx ) && ( T2_prev !== T2_expected_prev )
		&& ((T2_expected_prev !== last_T2_exp) ||
			on_first_change[36])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T2_expected_prev);
		$display ("     Real value = %b", T2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[36] = 1'b0;
		last_T2_exp = T2_expected_prev;
	end
	if (
		( T3_expected_prev !== 1'bx ) && ( T3_prev !== T3_expected_prev )
		&& ((T3_expected_prev !== last_T3_exp) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T3_expected_prev);
		$display ("     Real value = %b", T3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_T3_exp = T3_expected_prev;
	end
	if (
		( T4_expected_prev !== 1'bx ) && ( T4_prev !== T4_expected_prev )
		&& ((T4_expected_prev !== last_T4_exp) ||
			on_first_change[38])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T4_expected_prev);
		$display ("     Real value = %b", T4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[38] = 1'b0;
		last_T4_exp = T4_expected_prev;
	end
	if (
		( T5_expected_prev !== 1'bx ) && ( T5_prev !== T5_expected_prev )
		&& ((T5_expected_prev !== last_T5_exp) ||
			on_first_change[39])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T5_expected_prev);
		$display ("     Real value = %b", T5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[39] = 1'b0;
		last_T5_exp = T5_expected_prev;
	end
	if (
		( W1_expected_prev !== 1'bx ) && ( W1_prev !== W1_expected_prev )
		&& ((W1_expected_prev !== last_W1_exp) ||
			on_first_change[40])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port W1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", W1_expected_prev);
		$display ("     Real value = %b", W1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[40] = 1'b0;
		last_W1_exp = W1_expected_prev;
	end
	if (
		( W2_expected_prev !== 1'bx ) && ( W2_prev !== W2_expected_prev )
		&& ((W2_expected_prev !== last_W2_exp) ||
			on_first_change[41])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port W2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", W2_expected_prev);
		$display ("     Real value = %b", W2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[41] = 1'b0;
		last_W2_exp = W2_expected_prev;
	end
	if (
		( WR_expected_prev !== 1'bx ) && ( WR_prev !== WR_expected_prev )
		&& ((WR_expected_prev !== last_WR_exp) ||
			on_first_change[42])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WR_expected_prev);
		$display ("     Real value = %b", WR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[42] = 1'b0;
		last_WR_exp = WR_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module 4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg CLR;
// wires                                               
wire [7:0] BUS;
wire CN;
wire CPIR;
wire CPMAR;
wire CPPC;
wire CPR0;
wire CPR1;
wire G;
wire M;
wire MA;
wire PB;
wire PC0;
wire PC1;
wire PC2;
wire PC3;
wire PC4;
wire PC5;
wire PC6;
wire PC7;
wire R00;
wire R01;
wire R02;
wire R03;
wire R10;
wire R11;
wire R12;
wire R13;
wire RA;
wire RB;
wire RD;
wire S0;
wire S1;
wire S2;
wire S3;
wire T1;
wire T2;
wire T3;
wire T4;
wire T5;
wire W1;
wire W2;
wire WR;

wire sampler;                             

// assign statements (if any)                          
4 i1 (
// port map - connection between master ports and signals/registers   
	.BUS(BUS),
	.CLK(CLK),
	.CLR(CLR),
	.CN(CN),
	.CPIR(CPIR),
	.CPMAR(CPMAR),
	.CPPC(CPPC),
	.CPR0(CPR0),
	.CPR1(CPR1),
	.G(G),
	.M(M),
	.MA(MA),
	.PB(PB),
	.PC0(PC0),
	.PC1(PC1),
	.PC2(PC2),
	.PC3(PC3),
	.PC4(PC4),
	.PC5(PC5),
	.PC6(PC6),
	.PC7(PC7),
	.R00(R00),
	.R01(R01),
	.R02(R02),
	.R03(R03),
	.R10(R10),
	.R11(R11),
	.R12(R12),
	.R13(R13),
	.RA(RA),
	.RB(RB),
	.RD(RD),
	.S0(S0),
	.S1(S1),
	.S2(S2),
	.S3(S3),
	.T1(T1),
	.T2(T2),
	.T3(T3),
	.T4(T4),
	.T5(T5),
	.W1(W1),
	.W2(W2),
	.WR(WR)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 

// CLR
initial
begin
	CLR = 1'b1;
end 

4_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.CLR(CLR),
	.sampler_tx(sampler)
);

4_vlg_check_tst tb_out(
	.BUS(BUS),
	.CN(CN),
	.CPIR(CPIR),
	.CPMAR(CPMAR),
	.CPPC(CPPC),
	.CPR0(CPR0),
	.CPR1(CPR1),
	.G(G),
	.M(M),
	.MA(MA),
	.PB(PB),
	.PC0(PC0),
	.PC1(PC1),
	.PC2(PC2),
	.PC3(PC3),
	.PC4(PC4),
	.PC5(PC5),
	.PC6(PC6),
	.PC7(PC7),
	.R00(R00),
	.R01(R01),
	.R02(R02),
	.R03(R03),
	.R10(R10),
	.R11(R11),
	.R12(R12),
	.R13(R13),
	.RA(RA),
	.RB(RB),
	.RD(RD),
	.S0(S0),
	.S1(S1),
	.S2(S2),
	.S3(S3),
	.T1(T1),
	.T2(T2),
	.T3(T3),
	.T4(T4),
	.T5(T5),
	.W1(W1),
	.W2(W2),
	.WR(WR),
	.sampler_rx(sampler)
);
endmodule

