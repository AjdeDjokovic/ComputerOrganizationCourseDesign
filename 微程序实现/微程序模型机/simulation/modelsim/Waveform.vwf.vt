// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/26/2019 16:59:34"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module 3_vlg_sample_tst(
	CLK,
	CLR,
	sampler_tx
);
input  CLK;
input  CLR;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or CLR)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module 3_vlg_check_tst (
	0,
	1,
	2,
	3,
	4,
	5,
	6,
	7,
	pin_name1,
	pin_name2,
	pin_name3,
	pin_name4,
	pin_name5,
	pin_name6,
	pin_name7,
	pin_name8,
	pin_name9,
	pin_name10,
	pin_name11,
	pin_name12,
	pin_name14,
	pin_name15,
	pin_name16,
	pin_name17,
	pin_name18,
	pin_name19,
	pin_name20,
	pin_name21,
	sampler_rx
);
input  0;
input  1;
input  2;
input  3;
input  4;
input  5;
input  6;
input  7;
input  pin_name1;
input  pin_name2;
input  pin_name3;
input  pin_name4;
input  pin_name5;
input  pin_name6;
input  pin_name7;
input  pin_name8;
input  pin_name9;
input  pin_name10;
input  pin_name11;
input  pin_name12;
input  pin_name14;
input  pin_name15;
input  pin_name16;
input  pin_name17;
input  pin_name18;
input  pin_name19;
input  pin_name20;
input  pin_name21;
input sampler_rx;

reg  0_expected;
reg  1_expected;
reg  2_expected;
reg  3_expected;
reg  4_expected;
reg  5_expected;
reg  6_expected;
reg  7_expected;
reg  pin_name1_expected;
reg  pin_name2_expected;
reg  pin_name3_expected;
reg  pin_name4_expected;
reg  pin_name5_expected;
reg  pin_name6_expected;
reg  pin_name7_expected;
reg  pin_name8_expected;
reg  pin_name9_expected;
reg  pin_name10_expected;
reg  pin_name11_expected;
reg  pin_name12_expected;
reg  pin_name14_expected;
reg  pin_name15_expected;
reg  pin_name16_expected;
reg  pin_name17_expected;
reg  pin_name18_expected;
reg  pin_name19_expected;
reg  pin_name20_expected;
reg  pin_name21_expected;

reg  0_prev;
reg  1_prev;
reg  2_prev;
reg  3_prev;
reg  4_prev;
reg  5_prev;
reg  6_prev;
reg  7_prev;
reg  pin_name1_prev;
reg  pin_name2_prev;
reg  pin_name3_prev;
reg  pin_name4_prev;
reg  pin_name5_prev;
reg  pin_name6_prev;
reg  pin_name7_prev;
reg  pin_name8_prev;
reg  pin_name9_prev;
reg  pin_name10_prev;
reg  pin_name11_prev;
reg  pin_name12_prev;
reg  pin_name14_prev;
reg  pin_name15_prev;
reg  pin_name16_prev;
reg  pin_name17_prev;
reg  pin_name18_prev;
reg  pin_name19_prev;
reg  pin_name20_prev;
reg  pin_name21_prev;

reg  0_expected_prev;
reg  1_expected_prev;
reg  2_expected_prev;
reg  3_expected_prev;
reg  4_expected_prev;
reg  5_expected_prev;
reg  6_expected_prev;
reg  7_expected_prev;
reg  pin_name1_expected_prev;
reg  pin_name2_expected_prev;
reg  pin_name3_expected_prev;
reg  pin_name4_expected_prev;
reg  pin_name5_expected_prev;
reg  pin_name6_expected_prev;
reg  pin_name7_expected_prev;
reg  pin_name8_expected_prev;
reg  pin_name9_expected_prev;
reg  pin_name10_expected_prev;
reg  pin_name11_expected_prev;
reg  pin_name12_expected_prev;
reg  pin_name14_expected_prev;
reg  pin_name15_expected_prev;
reg  pin_name16_expected_prev;
reg  pin_name17_expected_prev;
reg  pin_name18_expected_prev;
reg  pin_name19_expected_prev;
reg  pin_name20_expected_prev;
reg  pin_name21_expected_prev;

reg  last_0_exp;
reg  last_1_exp;
reg  last_2_exp;
reg  last_3_exp;
reg  last_4_exp;
reg  last_5_exp;
reg  last_6_exp;
reg  last_7_exp;
reg  last_pin_name1_exp;
reg  last_pin_name2_exp;
reg  last_pin_name3_exp;
reg  last_pin_name4_exp;
reg  last_pin_name5_exp;
reg  last_pin_name6_exp;
reg  last_pin_name7_exp;
reg  last_pin_name8_exp;
reg  last_pin_name9_exp;
reg  last_pin_name10_exp;
reg  last_pin_name11_exp;
reg  last_pin_name12_exp;
reg  last_pin_name14_exp;
reg  last_pin_name15_exp;
reg  last_pin_name16_exp;
reg  last_pin_name17_exp;
reg  last_pin_name18_exp;
reg  last_pin_name19_exp;
reg  last_pin_name20_exp;
reg  last_pin_name21_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:28] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 28'b1;
end

// update real /o prevs

always @(trigger)
begin
	0_prev = 0;
	1_prev = 1;
	2_prev = 2;
	3_prev = 3;
	4_prev = 4;
	5_prev = 5;
	6_prev = 6;
	7_prev = 7;
	pin_name1_prev = pin_name1;
	pin_name2_prev = pin_name2;
	pin_name3_prev = pin_name3;
	pin_name4_prev = pin_name4;
	pin_name5_prev = pin_name5;
	pin_name6_prev = pin_name6;
	pin_name7_prev = pin_name7;
	pin_name8_prev = pin_name8;
	pin_name9_prev = pin_name9;
	pin_name10_prev = pin_name10;
	pin_name11_prev = pin_name11;
	pin_name12_prev = pin_name12;
	pin_name14_prev = pin_name14;
	pin_name15_prev = pin_name15;
	pin_name16_prev = pin_name16;
	pin_name17_prev = pin_name17;
	pin_name18_prev = pin_name18;
	pin_name19_prev = pin_name19;
	pin_name20_prev = pin_name20;
	pin_name21_prev = pin_name21;
end

// update expected /o prevs

always @(trigger)
begin
	0_expected_prev = 0_expected;
	1_expected_prev = 1_expected;
	2_expected_prev = 2_expected;
	3_expected_prev = 3_expected;
	4_expected_prev = 4_expected;
	5_expected_prev = 5_expected;
	6_expected_prev = 6_expected;
	7_expected_prev = 7_expected;
	pin_name1_expected_prev = pin_name1_expected;
	pin_name2_expected_prev = pin_name2_expected;
	pin_name3_expected_prev = pin_name3_expected;
	pin_name4_expected_prev = pin_name4_expected;
	pin_name5_expected_prev = pin_name5_expected;
	pin_name6_expected_prev = pin_name6_expected;
	pin_name7_expected_prev = pin_name7_expected;
	pin_name8_expected_prev = pin_name8_expected;
	pin_name9_expected_prev = pin_name9_expected;
	pin_name10_expected_prev = pin_name10_expected;
	pin_name11_expected_prev = pin_name11_expected;
	pin_name12_expected_prev = pin_name12_expected;
	pin_name14_expected_prev = pin_name14_expected;
	pin_name15_expected_prev = pin_name15_expected;
	pin_name16_expected_prev = pin_name16_expected;
	pin_name17_expected_prev = pin_name17_expected;
	pin_name18_expected_prev = pin_name18_expected;
	pin_name19_expected_prev = pin_name19_expected;
	pin_name20_expected_prev = pin_name20_expected;
	pin_name21_expected_prev = pin_name21_expected;
end



// expected 0
initial
begin
	0_expected = 1'bX;
end 

// expected 1
initial
begin
	1_expected = 1'bX;
end 

// expected 2
initial
begin
	2_expected = 1'bX;
end 

// expected 3
initial
begin
	3_expected = 1'bX;
end 

// expected 4
initial
begin
	4_expected = 1'bX;
end 

// expected 5
initial
begin
	5_expected = 1'bX;
end 

// expected 6
initial
begin
	6_expected = 1'bX;
end 

// expected 7
initial
begin
	7_expected = 1'bX;
end 

// expected pin_name1
initial
begin
	pin_name1_expected = 1'bX;
end 

// expected pin_name2
initial
begin
	pin_name2_expected = 1'bX;
end 

// expected pin_name3
initial
begin
	pin_name3_expected = 1'bX;
end 

// expected pin_name4
initial
begin
	pin_name4_expected = 1'bX;
end 

// expected pin_name5
initial
begin
	pin_name5_expected = 1'bX;
end 

// expected pin_name6
initial
begin
	pin_name6_expected = 1'bX;
end 

// expected pin_name7
initial
begin
	pin_name7_expected = 1'bX;
end 

// expected pin_name8
initial
begin
	pin_name8_expected = 1'bX;
end 

// expected pin_name9
initial
begin
	pin_name9_expected = 1'bX;
end 

// expected pin_name10
initial
begin
	pin_name10_expected = 1'bX;
end 

// expected pin_name11
initial
begin
	pin_name11_expected = 1'bX;
end 

// expected pin_name12
initial
begin
	pin_name12_expected = 1'bX;
end 

// expected pin_name14
initial
begin
	pin_name14_expected = 1'bX;
end 

// expected pin_name15
initial
begin
	pin_name15_expected = 1'bX;
end 

// expected pin_name16
initial
begin
	pin_name16_expected = 1'bX;
end 

// expected pin_name17
initial
begin
	pin_name17_expected = 1'bX;
end 

// expected pin_name18
initial
begin
	pin_name18_expected = 1'bX;
end 

// expected pin_name19
initial
begin
	pin_name19_expected = 1'bX;
end 

// expected pin_name20
initial
begin
	pin_name20_expected = 1'bX;
end 

// expected pin_name21
initial
begin
	pin_name21_expected = 1'bX;
end 
// generate trigger
always @(0_expected or 0 or 1_expected or 1 or 2_expected or 2 or 3_expected or 3 or 4_expected or 4 or 5_expected or 5 or 6_expected or 6 or 7_expected or 7 or pin_name1_expected or pin_name1 or pin_name2_expected or pin_name2 or pin_name3_expected or pin_name3 or pin_name4_expected or pin_name4 or pin_name5_expected or pin_name5 or pin_name6_expected or pin_name6 or pin_name7_expected or pin_name7 or pin_name8_expected or pin_name8 or pin_name9_expected or pin_name9 or pin_name10_expected or pin_name10 or pin_name11_expected or pin_name11 or pin_name12_expected or pin_name12 or pin_name14_expected or pin_name14 or pin_name15_expected or pin_name15 or pin_name16_expected or pin_name16 or pin_name17_expected or pin_name17 or pin_name18_expected or pin_name18 or pin_name19_expected or pin_name19 or pin_name20_expected or pin_name20 or pin_name21_expected or pin_name21)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected 0 = %b | expected 1 = %b | expected 2 = %b | expected 3 = %b | expected 4 = %b | expected 5 = %b | expected 6 = %b | expected 7 = %b | expected pin_name1 = %b | expected pin_name2 = %b | expected pin_name3 = %b | expected pin_name4 = %b | expected pin_name5 = %b | expected pin_name6 = %b | expected pin_name7 = %b | expected pin_name8 = %b | expected pin_name9 = %b | expected pin_name10 = %b | expected pin_name11 = %b | expected pin_name12 = %b | expected pin_name14 = %b | expected pin_name15 = %b | expected pin_name16 = %b | expected pin_name17 = %b | expected pin_name18 = %b | expected pin_name19 = %b | expected pin_name20 = %b | expected pin_name21 = %b | ",0_expected_prev,1_expected_prev,2_expected_prev,3_expected_prev,4_expected_prev,5_expected_prev,6_expected_prev,7_expected_prev,pin_name1_expected_prev,pin_name2_expected_prev,pin_name3_expected_prev,pin_name4_expected_prev,pin_name5_expected_prev,pin_name6_expected_prev,pin_name7_expected_prev,pin_name8_expected_prev,pin_name9_expected_prev,pin_name10_expected_prev,pin_name11_expected_prev,pin_name12_expected_prev,pin_name14_expected_prev,pin_name15_expected_prev,pin_name16_expected_prev,pin_name17_expected_prev,pin_name18_expected_prev,pin_name19_expected_prev,pin_name20_expected_prev,pin_name21_expected_prev);
	$display("| real 0 = %b | real 1 = %b | real 2 = %b | real 3 = %b | real 4 = %b | real 5 = %b | real 6 = %b | real 7 = %b | real pin_name1 = %b | real pin_name2 = %b | real pin_name3 = %b | real pin_name4 = %b | real pin_name5 = %b | real pin_name6 = %b | real pin_name7 = %b | real pin_name8 = %b | real pin_name9 = %b | real pin_name10 = %b | real pin_name11 = %b | real pin_name12 = %b | real pin_name14 = %b | real pin_name15 = %b | real pin_name16 = %b | real pin_name17 = %b | real pin_name18 = %b | real pin_name19 = %b | real pin_name20 = %b | real pin_name21 = %b | ",0_prev,1_prev,2_prev,3_prev,4_prev,5_prev,6_prev,7_prev,pin_name1_prev,pin_name2_prev,pin_name3_prev,pin_name4_prev,pin_name5_prev,pin_name6_prev,pin_name7_prev,pin_name8_prev,pin_name9_prev,pin_name10_prev,pin_name11_prev,pin_name12_prev,pin_name14_prev,pin_name15_prev,pin_name16_prev,pin_name17_prev,pin_name18_prev,pin_name19_prev,pin_name20_prev,pin_name21_prev);
`endif
	if (
		( 0_expected_prev !== 1'bx ) && ( 0_prev !== 0_expected_prev )
		&& ((0_expected_prev !== last_0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 0_expected_prev);
		$display ("     Real value = %b", 0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_0_exp = 0_expected_prev;
	end
	if (
		( 1_expected_prev !== 1'bx ) && ( 1_prev !== 1_expected_prev )
		&& ((1_expected_prev !== last_1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 1_expected_prev);
		$display ("     Real value = %b", 1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_1_exp = 1_expected_prev;
	end
	if (
		( 2_expected_prev !== 1'bx ) && ( 2_prev !== 2_expected_prev )
		&& ((2_expected_prev !== last_2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 2_expected_prev);
		$display ("     Real value = %b", 2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_2_exp = 2_expected_prev;
	end
	if (
		( 3_expected_prev !== 1'bx ) && ( 3_prev !== 3_expected_prev )
		&& ((3_expected_prev !== last_3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 3_expected_prev);
		$display ("     Real value = %b", 3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_3_exp = 3_expected_prev;
	end
	if (
		( 4_expected_prev !== 1'bx ) && ( 4_prev !== 4_expected_prev )
		&& ((4_expected_prev !== last_4_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 4_expected_prev);
		$display ("     Real value = %b", 4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_4_exp = 4_expected_prev;
	end
	if (
		( 5_expected_prev !== 1'bx ) && ( 5_prev !== 5_expected_prev )
		&& ((5_expected_prev !== last_5_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 5_expected_prev);
		$display ("     Real value = %b", 5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_5_exp = 5_expected_prev;
	end
	if (
		( 6_expected_prev !== 1'bx ) && ( 6_prev !== 6_expected_prev )
		&& ((6_expected_prev !== last_6_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 6_expected_prev);
		$display ("     Real value = %b", 6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_6_exp = 6_expected_prev;
	end
	if (
		( 7_expected_prev !== 1'bx ) && ( 7_prev !== 7_expected_prev )
		&& ((7_expected_prev !== last_7_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 7_expected_prev);
		$display ("     Real value = %b", 7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_7_exp = 7_expected_prev;
	end
	if (
		( pin_name1_expected_prev !== 1'bx ) && ( pin_name1_prev !== pin_name1_expected_prev )
		&& ((pin_name1_expected_prev !== last_pin_name1_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pin_name1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pin_name1_expected_prev);
		$display ("     Real value = %b", pin_name1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pin_name1_exp = pin_name1_expected_prev;
	end
	if (
		( pin_name2_expected_prev !== 1'bx ) && ( pin_name2_prev !== pin_name2_expected_prev )
		&& ((pin_name2_expected_prev !== last_pin_name2_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pin_name2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pin_name2_expected_prev);
		$display ("     Real value = %b", pin_name2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pin_name2_exp = pin_name2_expected_prev;
	end
	if (
		( pin_name3_expected_prev !== 1'bx ) && ( pin_name3_prev !== pin_name3_expected_prev )
		&& ((pin_name3_expected_prev !== last_pin_name3_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pin_name3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pin_name3_expected_prev);
		$display ("     Real value = %b", pin_name3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pin_name3_exp = pin_name3_expected_prev;
	end
	if (
		( pin_name4_expected_prev !== 1'bx ) && ( pin_name4_prev !== pin_name4_expected_prev )
		&& ((pin_name4_expected_prev !== last_pin_name4_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pin_name4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pin_name4_expected_prev);
		$display ("     Real value = %b", pin_name4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pin_name4_exp = pin_name4_expected_prev;
	end
	if (
		( pin_name5_expected_prev !== 1'bx ) && ( pin_name5_prev !== pin_name5_expected_prev )
		&& ((pin_name5_expected_prev !== last_pin_name5_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pin_name5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pin_name5_expected_prev);
		$display ("     Real value = %b", pin_name5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_pin_name5_exp = pin_name5_expected_prev;
	end
	if (
		( pin_name6_expected_prev !== 1'bx ) && ( pin_name6_prev !== pin_name6_expected_prev )
		&& ((pin_name6_expected_prev !== last_pin_name6_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pin_name6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pin_name6_expected_prev);
		$display ("     Real value = %b", pin_name6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_pin_name6_exp = pin_name6_expected_prev;
	end
	if (
		( pin_name7_expected_prev !== 1'bx ) && ( pin_name7_prev !== pin_name7_expected_prev )
		&& ((pin_name7_expected_prev !== last_pin_name7_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pin_name7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pin_name7_expected_prev);
		$display ("     Real value = %b", pin_name7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_pin_name7_exp = pin_name7_expected_prev;
	end
	if (
		( pin_name8_expected_prev !== 1'bx ) && ( pin_name8_prev !== pin_name8_expected_prev )
		&& ((pin_name8_expected_prev !== last_pin_name8_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pin_name8 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pin_name8_expected_prev);
		$display ("     Real value = %b", pin_name8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_pin_name8_exp = pin_name8_expected_prev;
	end
	if (
		( pin_name9_expected_prev !== 1'bx ) && ( pin_name9_prev !== pin_name9_expected_prev )
		&& ((pin_name9_expected_prev !== last_pin_name9_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pin_name9 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pin_name9_expected_prev);
		$display ("     Real value = %b", pin_name9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_pin_name9_exp = pin_name9_expected_prev;
	end
	if (
		( pin_name10_expected_prev !== 1'bx ) && ( pin_name10_prev !== pin_name10_expected_prev )
		&& ((pin_name10_expected_prev !== last_pin_name10_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pin_name10 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pin_name10_expected_prev);
		$display ("     Real value = %b", pin_name10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_pin_name10_exp = pin_name10_expected_prev;
	end
	if (
		( pin_name11_expected_prev !== 1'bx ) && ( pin_name11_prev !== pin_name11_expected_prev )
		&& ((pin_name11_expected_prev !== last_pin_name11_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pin_name11 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pin_name11_expected_prev);
		$display ("     Real value = %b", pin_name11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_pin_name11_exp = pin_name11_expected_prev;
	end
	if (
		( pin_name12_expected_prev !== 1'bx ) && ( pin_name12_prev !== pin_name12_expected_prev )
		&& ((pin_name12_expected_prev !== last_pin_name12_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pin_name12 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pin_name12_expected_prev);
		$display ("     Real value = %b", pin_name12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_pin_name12_exp = pin_name12_expected_prev;
	end
	if (
		( pin_name14_expected_prev !== 1'bx ) && ( pin_name14_prev !== pin_name14_expected_prev )
		&& ((pin_name14_expected_prev !== last_pin_name14_exp) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pin_name14 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pin_name14_expected_prev);
		$display ("     Real value = %b", pin_name14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_pin_name14_exp = pin_name14_expected_prev;
	end
	if (
		( pin_name15_expected_prev !== 1'bx ) && ( pin_name15_prev !== pin_name15_expected_prev )
		&& ((pin_name15_expected_prev !== last_pin_name15_exp) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pin_name15 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pin_name15_expected_prev);
		$display ("     Real value = %b", pin_name15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_pin_name15_exp = pin_name15_expected_prev;
	end
	if (
		( pin_name16_expected_prev !== 1'bx ) && ( pin_name16_prev !== pin_name16_expected_prev )
		&& ((pin_name16_expected_prev !== last_pin_name16_exp) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pin_name16 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pin_name16_expected_prev);
		$display ("     Real value = %b", pin_name16_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_pin_name16_exp = pin_name16_expected_prev;
	end
	if (
		( pin_name17_expected_prev !== 1'bx ) && ( pin_name17_prev !== pin_name17_expected_prev )
		&& ((pin_name17_expected_prev !== last_pin_name17_exp) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pin_name17 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pin_name17_expected_prev);
		$display ("     Real value = %b", pin_name17_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_pin_name17_exp = pin_name17_expected_prev;
	end
	if (
		( pin_name18_expected_prev !== 1'bx ) && ( pin_name18_prev !== pin_name18_expected_prev )
		&& ((pin_name18_expected_prev !== last_pin_name18_exp) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pin_name18 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pin_name18_expected_prev);
		$display ("     Real value = %b", pin_name18_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_pin_name18_exp = pin_name18_expected_prev;
	end
	if (
		( pin_name19_expected_prev !== 1'bx ) && ( pin_name19_prev !== pin_name19_expected_prev )
		&& ((pin_name19_expected_prev !== last_pin_name19_exp) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pin_name19 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pin_name19_expected_prev);
		$display ("     Real value = %b", pin_name19_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_pin_name19_exp = pin_name19_expected_prev;
	end
	if (
		( pin_name20_expected_prev !== 1'bx ) && ( pin_name20_prev !== pin_name20_expected_prev )
		&& ((pin_name20_expected_prev !== last_pin_name20_exp) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pin_name20 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pin_name20_expected_prev);
		$display ("     Real value = %b", pin_name20_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_pin_name20_exp = pin_name20_expected_prev;
	end
	if (
		( pin_name21_expected_prev !== 1'bx ) && ( pin_name21_prev !== pin_name21_expected_prev )
		&& ((pin_name21_expected_prev !== last_pin_name21_exp) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pin_name21 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pin_name21_expected_prev);
		$display ("     Real value = %b", pin_name21_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_pin_name21_exp = pin_name21_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module 3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg CLR;
// wires                                               
wire 0;
wire 1;
wire 2;
wire 3;
wire 4;
wire 5;
wire 6;
wire 7;
wire pin_name1;
wire pin_name2;
wire pin_name3;
wire pin_name4;
wire pin_name5;
wire pin_name6;
wire pin_name7;
wire pin_name8;
wire pin_name9;
wire pin_name10;
wire pin_name11;
wire pin_name12;
wire pin_name14;
wire pin_name15;
wire pin_name16;
wire pin_name17;
wire pin_name18;
wire pin_name19;
wire pin_name20;
wire pin_name21;

wire sampler;                             

// assign statements (if any)                          
3 i1 (
// port map - connection between master ports and signals/registers   
	.\0 (0),
	.\1 (1),
	.\2 (2),
	.\3 (3),
	.\4 (4),
	.\5 (5),
	.\6 (6),
	.\7 (7),
	.CLK(CLK),
	.CLR(CLR),
	.pin_name1(pin_name1),
	.pin_name2(pin_name2),
	.pin_name3(pin_name3),
	.pin_name4(pin_name4),
	.pin_name5(pin_name5),
	.pin_name6(pin_name6),
	.pin_name7(pin_name7),
	.pin_name8(pin_name8),
	.pin_name9(pin_name9),
	.pin_name10(pin_name10),
	.pin_name11(pin_name11),
	.pin_name12(pin_name12),
	.pin_name14(pin_name14),
	.pin_name15(pin_name15),
	.pin_name16(pin_name16),
	.pin_name17(pin_name17),
	.pin_name18(pin_name18),
	.pin_name19(pin_name19),
	.pin_name20(pin_name20),
	.pin_name21(pin_name21)
);

// CLK
initial
begin
	CLK = 1'b0;
end 

// CLR
initial
begin
	CLR = 1'b1;
end 

3_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.CLR(CLR),
	.sampler_tx(sampler)
);

3_vlg_check_tst tb_out(
	.0(0),
	.1(1),
	.2(2),
	.3(3),
	.4(4),
	.5(5),
	.6(6),
	.7(7),
	.pin_name1(pin_name1),
	.pin_name2(pin_name2),
	.pin_name3(pin_name3),
	.pin_name4(pin_name4),
	.pin_name5(pin_name5),
	.pin_name6(pin_name6),
	.pin_name7(pin_name7),
	.pin_name8(pin_name8),
	.pin_name9(pin_name9),
	.pin_name10(pin_name10),
	.pin_name11(pin_name11),
	.pin_name12(pin_name12),
	.pin_name14(pin_name14),
	.pin_name15(pin_name15),
	.pin_name16(pin_name16),
	.pin_name17(pin_name17),
	.pin_name18(pin_name18),
	.pin_name19(pin_name19),
	.pin_name20(pin_name20),
	.pin_name21(pin_name21),
	.sampler_rx(sampler)
);
endmodule

