// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/11/2019 15:40:35"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module 3_vlg_sample_tst(
	CLR,
	CONTINUE,
	SINGLE,
	sampler_tx
);
input  CLR;
input  CONTINUE;
input  SINGLE;
output sampler_tx;

reg sample;
time current_time;
always @(CLR or CONTINUE or SINGLE)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module 3_vlg_check_tst (
	ALUC0,
	ALUC1,
	ALUC2,
	ALUC3,
	BUS,
	R00,
	R01,
	R02,
	R03,
	R10,
	R11,
	R12,
	R13,
	R20,
	R21,
	R22,
	R23,
	romA0,
	romA1,
	romA2,
	romA3,
	romA6,
	romA7,
	romA8,
	romA9,
	romA10,
	romA11,
	sampler_rx
);
input  ALUC0;
input  ALUC1;
input  ALUC2;
input  ALUC3;
input [7:0] BUS;
input  R00;
input  R01;
input  R02;
input  R03;
input  R10;
input  R11;
input  R12;
input  R13;
input  R20;
input  R21;
input  R22;
input  R23;
input  romA0;
input  romA1;
input  romA2;
input  romA3;
input  romA6;
input  romA7;
input  romA8;
input  romA9;
input  romA10;
input  romA11;
input sampler_rx;

reg  ALUC0_expected;
reg  ALUC1_expected;
reg  ALUC2_expected;
reg  ALUC3_expected;
reg [7:0] BUS_expected;
reg  R00_expected;
reg  R01_expected;
reg  R02_expected;
reg  R03_expected;
reg  R10_expected;
reg  R11_expected;
reg  R12_expected;
reg  R13_expected;
reg  R20_expected;
reg  R21_expected;
reg  R22_expected;
reg  R23_expected;
reg  romA0_expected;
reg  romA1_expected;
reg  romA2_expected;
reg  romA3_expected;
reg  romA6_expected;
reg  romA7_expected;
reg  romA8_expected;
reg  romA9_expected;
reg  romA10_expected;
reg  romA11_expected;

reg  ALUC0_prev;
reg  ALUC1_prev;
reg  ALUC2_prev;
reg  ALUC3_prev;
reg [7:0] BUS_prev;
reg  R00_prev;
reg  R01_prev;
reg  R02_prev;
reg  R03_prev;
reg  R10_prev;
reg  R11_prev;
reg  R12_prev;
reg  R13_prev;
reg  R20_prev;
reg  R21_prev;
reg  R22_prev;
reg  R23_prev;
reg  romA0_prev;
reg  romA1_prev;
reg  romA2_prev;
reg  romA3_prev;
reg  romA6_prev;
reg  romA7_prev;
reg  romA8_prev;
reg  romA9_prev;
reg  romA10_prev;
reg  romA11_prev;

reg  ALUC0_expected_prev;
reg  ALUC1_expected_prev;
reg  ALUC2_expected_prev;
reg  ALUC3_expected_prev;
reg [7:0] BUS_expected_prev;
reg  R00_expected_prev;
reg  R01_expected_prev;
reg  R02_expected_prev;
reg  R03_expected_prev;
reg  R10_expected_prev;
reg  R11_expected_prev;
reg  R12_expected_prev;
reg  R13_expected_prev;
reg  R20_expected_prev;
reg  R21_expected_prev;
reg  R22_expected_prev;
reg  R23_expected_prev;
reg  romA0_expected_prev;
reg  romA1_expected_prev;
reg  romA2_expected_prev;
reg  romA3_expected_prev;
reg  romA6_expected_prev;
reg  romA7_expected_prev;
reg  romA8_expected_prev;
reg  romA9_expected_prev;
reg  romA10_expected_prev;
reg  romA11_expected_prev;

reg  last_ALUC0_exp;
reg  last_ALUC1_exp;
reg  last_ALUC2_exp;
reg  last_ALUC3_exp;
reg [7:0] last_BUS_exp;
reg  last_R00_exp;
reg  last_R01_exp;
reg  last_R02_exp;
reg  last_R03_exp;
reg  last_R10_exp;
reg  last_R11_exp;
reg  last_R12_exp;
reg  last_R13_exp;
reg  last_R20_exp;
reg  last_R21_exp;
reg  last_R22_exp;
reg  last_R23_exp;
reg  last_romA0_exp;
reg  last_romA1_exp;
reg  last_romA2_exp;
reg  last_romA3_exp;
reg  last_romA6_exp;
reg  last_romA7_exp;
reg  last_romA8_exp;
reg  last_romA9_exp;
reg  last_romA10_exp;
reg  last_romA11_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:27] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 27'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALUC0_prev = ALUC0;
	ALUC1_prev = ALUC1;
	ALUC2_prev = ALUC2;
	ALUC3_prev = ALUC3;
	BUS_prev = BUS;
	R00_prev = R00;
	R01_prev = R01;
	R02_prev = R02;
	R03_prev = R03;
	R10_prev = R10;
	R11_prev = R11;
	R12_prev = R12;
	R13_prev = R13;
	R20_prev = R20;
	R21_prev = R21;
	R22_prev = R22;
	R23_prev = R23;
	romA0_prev = romA0;
	romA1_prev = romA1;
	romA2_prev = romA2;
	romA3_prev = romA3;
	romA6_prev = romA6;
	romA7_prev = romA7;
	romA8_prev = romA8;
	romA9_prev = romA9;
	romA10_prev = romA10;
	romA11_prev = romA11;
end

// update expected /o prevs

always @(trigger)
begin
	ALUC0_expected_prev = ALUC0_expected;
	ALUC1_expected_prev = ALUC1_expected;
	ALUC2_expected_prev = ALUC2_expected;
	ALUC3_expected_prev = ALUC3_expected;
	BUS_expected_prev = BUS_expected;
	R00_expected_prev = R00_expected;
	R01_expected_prev = R01_expected;
	R02_expected_prev = R02_expected;
	R03_expected_prev = R03_expected;
	R10_expected_prev = R10_expected;
	R11_expected_prev = R11_expected;
	R12_expected_prev = R12_expected;
	R13_expected_prev = R13_expected;
	R20_expected_prev = R20_expected;
	R21_expected_prev = R21_expected;
	R22_expected_prev = R22_expected;
	R23_expected_prev = R23_expected;
	romA0_expected_prev = romA0_expected;
	romA1_expected_prev = romA1_expected;
	romA2_expected_prev = romA2_expected;
	romA3_expected_prev = romA3_expected;
	romA6_expected_prev = romA6_expected;
	romA7_expected_prev = romA7_expected;
	romA8_expected_prev = romA8_expected;
	romA9_expected_prev = romA9_expected;
	romA10_expected_prev = romA10_expected;
	romA11_expected_prev = romA11_expected;
end



// expected ALUC0
initial
begin
	ALUC0_expected = 1'bX;
end 

// expected ALUC1
initial
begin
	ALUC1_expected = 1'bX;
end 

// expected ALUC2
initial
begin
	ALUC2_expected = 1'bX;
end 

// expected ALUC3
initial
begin
	ALUC3_expected = 1'bX;
end 
// expected BUS[ 7 ]
initial
begin
	BUS_expected[7] = 1'bX;
end 
// expected BUS[ 6 ]
initial
begin
	BUS_expected[6] = 1'bX;
end 
// expected BUS[ 5 ]
initial
begin
	BUS_expected[5] = 1'bX;
end 
// expected BUS[ 4 ]
initial
begin
	BUS_expected[4] = 1'bX;
end 
// expected BUS[ 3 ]
initial
begin
	BUS_expected[3] = 1'bX;
end 
// expected BUS[ 2 ]
initial
begin
	BUS_expected[2] = 1'bX;
end 
// expected BUS[ 1 ]
initial
begin
	BUS_expected[1] = 1'bX;
end 
// expected BUS[ 0 ]
initial
begin
	BUS_expected[0] = 1'bX;
end 

// expected R00
initial
begin
	R00_expected = 1'bX;
end 

// expected R01
initial
begin
	R01_expected = 1'bX;
end 

// expected R02
initial
begin
	R02_expected = 1'bX;
end 

// expected R03
initial
begin
	R03_expected = 1'bX;
end 

// expected R10
initial
begin
	R10_expected = 1'bX;
end 

// expected R11
initial
begin
	R11_expected = 1'bX;
end 

// expected R12
initial
begin
	R12_expected = 1'bX;
end 

// expected R13
initial
begin
	R13_expected = 1'bX;
end 

// expected R20
initial
begin
	R20_expected = 1'bX;
end 

// expected R21
initial
begin
	R21_expected = 1'bX;
end 

// expected R22
initial
begin
	R22_expected = 1'bX;
end 

// expected R23
initial
begin
	R23_expected = 1'bX;
end 

// expected romA0
initial
begin
	romA0_expected = 1'bX;
end 

// expected romA1
initial
begin
	romA1_expected = 1'bX;
end 

// expected romA2
initial
begin
	romA2_expected = 1'bX;
end 

// expected romA3
initial
begin
	romA3_expected = 1'bX;
end 

// expected romA6
initial
begin
	romA6_expected = 1'bX;
end 

// expected romA7
initial
begin
	romA7_expected = 1'bX;
end 

// expected romA8
initial
begin
	romA8_expected = 1'bX;
end 

// expected romA9
initial
begin
	romA9_expected = 1'bX;
end 

// expected romA10
initial
begin
	romA10_expected = 1'bX;
end 

// expected romA11
initial
begin
	romA11_expected = 1'bX;
end 
// generate trigger
always @(ALUC0_expected or ALUC0 or ALUC1_expected or ALUC1 or ALUC2_expected or ALUC2 or ALUC3_expected or ALUC3 or BUS_expected or BUS or R00_expected or R00 or R01_expected or R01 or R02_expected or R02 or R03_expected or R03 or R10_expected or R10 or R11_expected or R11 or R12_expected or R12 or R13_expected or R13 or R20_expected or R20 or R21_expected or R21 or R22_expected or R22 or R23_expected or R23 or romA0_expected or romA0 or romA1_expected or romA1 or romA2_expected or romA2 or romA3_expected or romA3 or romA6_expected or romA6 or romA7_expected or romA7 or romA8_expected or romA8 or romA9_expected or romA9 or romA10_expected or romA10 or romA11_expected or romA11)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALUC0 = %b | expected ALUC1 = %b | expected ALUC2 = %b | expected ALUC3 = %b | expected BUS = %b | expected R00 = %b | expected R01 = %b | expected R02 = %b | expected R03 = %b | expected R10 = %b | expected R11 = %b | expected R12 = %b | expected R13 = %b | expected R20 = %b | expected R21 = %b | expected R22 = %b | expected R23 = %b | expected romA0 = %b | expected romA1 = %b | expected romA2 = %b | expected romA3 = %b | expected romA6 = %b | expected romA7 = %b | expected romA8 = %b | expected romA9 = %b | expected romA10 = %b | expected romA11 = %b | ",ALUC0_expected_prev,ALUC1_expected_prev,ALUC2_expected_prev,ALUC3_expected_prev,BUS_expected_prev,R00_expected_prev,R01_expected_prev,R02_expected_prev,R03_expected_prev,R10_expected_prev,R11_expected_prev,R12_expected_prev,R13_expected_prev,R20_expected_prev,R21_expected_prev,R22_expected_prev,R23_expected_prev,romA0_expected_prev,romA1_expected_prev,romA2_expected_prev,romA3_expected_prev,romA6_expected_prev,romA7_expected_prev,romA8_expected_prev,romA9_expected_prev,romA10_expected_prev,romA11_expected_prev);
	$display("| real ALUC0 = %b | real ALUC1 = %b | real ALUC2 = %b | real ALUC3 = %b | real BUS = %b | real R00 = %b | real R01 = %b | real R02 = %b | real R03 = %b | real R10 = %b | real R11 = %b | real R12 = %b | real R13 = %b | real R20 = %b | real R21 = %b | real R22 = %b | real R23 = %b | real romA0 = %b | real romA1 = %b | real romA2 = %b | real romA3 = %b | real romA6 = %b | real romA7 = %b | real romA8 = %b | real romA9 = %b | real romA10 = %b | real romA11 = %b | ",ALUC0_prev,ALUC1_prev,ALUC2_prev,ALUC3_prev,BUS_prev,R00_prev,R01_prev,R02_prev,R03_prev,R10_prev,R11_prev,R12_prev,R13_prev,R20_prev,R21_prev,R22_prev,R23_prev,romA0_prev,romA1_prev,romA2_prev,romA3_prev,romA6_prev,romA7_prev,romA8_prev,romA9_prev,romA10_prev,romA11_prev);
`endif
	if (
		( ALUC0_expected_prev !== 1'bx ) && ( ALUC0_prev !== ALUC0_expected_prev )
		&& ((ALUC0_expected_prev !== last_ALUC0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUC0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUC0_expected_prev);
		$display ("     Real value = %b", ALUC0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUC0_exp = ALUC0_expected_prev;
	end
	if (
		( ALUC1_expected_prev !== 1'bx ) && ( ALUC1_prev !== ALUC1_expected_prev )
		&& ((ALUC1_expected_prev !== last_ALUC1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUC1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUC1_expected_prev);
		$display ("     Real value = %b", ALUC1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUC1_exp = ALUC1_expected_prev;
	end
	if (
		( ALUC2_expected_prev !== 1'bx ) && ( ALUC2_prev !== ALUC2_expected_prev )
		&& ((ALUC2_expected_prev !== last_ALUC2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUC2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUC2_expected_prev);
		$display ("     Real value = %b", ALUC2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALUC2_exp = ALUC2_expected_prev;
	end
	if (
		( ALUC3_expected_prev !== 1'bx ) && ( ALUC3_prev !== ALUC3_expected_prev )
		&& ((ALUC3_expected_prev !== last_ALUC3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUC3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUC3_expected_prev);
		$display ("     Real value = %b", ALUC3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ALUC3_exp = ALUC3_expected_prev;
	end
	if (
		( BUS_expected_prev[0] !== 1'bx ) && ( BUS_prev[0] !== BUS_expected_prev[0] )
		&& ((BUS_expected_prev[0] !== last_BUS_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_BUS_exp[0] = BUS_expected_prev[0];
	end
	if (
		( BUS_expected_prev[1] !== 1'bx ) && ( BUS_prev[1] !== BUS_expected_prev[1] )
		&& ((BUS_expected_prev[1] !== last_BUS_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_BUS_exp[1] = BUS_expected_prev[1];
	end
	if (
		( BUS_expected_prev[2] !== 1'bx ) && ( BUS_prev[2] !== BUS_expected_prev[2] )
		&& ((BUS_expected_prev[2] !== last_BUS_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_BUS_exp[2] = BUS_expected_prev[2];
	end
	if (
		( BUS_expected_prev[3] !== 1'bx ) && ( BUS_prev[3] !== BUS_expected_prev[3] )
		&& ((BUS_expected_prev[3] !== last_BUS_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_BUS_exp[3] = BUS_expected_prev[3];
	end
	if (
		( BUS_expected_prev[4] !== 1'bx ) && ( BUS_prev[4] !== BUS_expected_prev[4] )
		&& ((BUS_expected_prev[4] !== last_BUS_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_BUS_exp[4] = BUS_expected_prev[4];
	end
	if (
		( BUS_expected_prev[5] !== 1'bx ) && ( BUS_prev[5] !== BUS_expected_prev[5] )
		&& ((BUS_expected_prev[5] !== last_BUS_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_BUS_exp[5] = BUS_expected_prev[5];
	end
	if (
		( BUS_expected_prev[6] !== 1'bx ) && ( BUS_prev[6] !== BUS_expected_prev[6] )
		&& ((BUS_expected_prev[6] !== last_BUS_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_BUS_exp[6] = BUS_expected_prev[6];
	end
	if (
		( BUS_expected_prev[7] !== 1'bx ) && ( BUS_prev[7] !== BUS_expected_prev[7] )
		&& ((BUS_expected_prev[7] !== last_BUS_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_BUS_exp[7] = BUS_expected_prev[7];
	end
	if (
		( R00_expected_prev !== 1'bx ) && ( R00_prev !== R00_expected_prev )
		&& ((R00_expected_prev !== last_R00_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R00 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R00_expected_prev);
		$display ("     Real value = %b", R00_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R00_exp = R00_expected_prev;
	end
	if (
		( R01_expected_prev !== 1'bx ) && ( R01_prev !== R01_expected_prev )
		&& ((R01_expected_prev !== last_R01_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R01 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R01_expected_prev);
		$display ("     Real value = %b", R01_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R01_exp = R01_expected_prev;
	end
	if (
		( R02_expected_prev !== 1'bx ) && ( R02_prev !== R02_expected_prev )
		&& ((R02_expected_prev !== last_R02_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R02 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R02_expected_prev);
		$display ("     Real value = %b", R02_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R02_exp = R02_expected_prev;
	end
	if (
		( R03_expected_prev !== 1'bx ) && ( R03_prev !== R03_expected_prev )
		&& ((R03_expected_prev !== last_R03_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R03 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R03_expected_prev);
		$display ("     Real value = %b", R03_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_R03_exp = R03_expected_prev;
	end
	if (
		( R10_expected_prev !== 1'bx ) && ( R10_prev !== R10_expected_prev )
		&& ((R10_expected_prev !== last_R10_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R10 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R10_expected_prev);
		$display ("     Real value = %b", R10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_R10_exp = R10_expected_prev;
	end
	if (
		( R11_expected_prev !== 1'bx ) && ( R11_prev !== R11_expected_prev )
		&& ((R11_expected_prev !== last_R11_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R11 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R11_expected_prev);
		$display ("     Real value = %b", R11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_R11_exp = R11_expected_prev;
	end
	if (
		( R12_expected_prev !== 1'bx ) && ( R12_prev !== R12_expected_prev )
		&& ((R12_expected_prev !== last_R12_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R12 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R12_expected_prev);
		$display ("     Real value = %b", R12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R12_exp = R12_expected_prev;
	end
	if (
		( R13_expected_prev !== 1'bx ) && ( R13_prev !== R13_expected_prev )
		&& ((R13_expected_prev !== last_R13_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R13 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R13_expected_prev);
		$display ("     Real value = %b", R13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R13_exp = R13_expected_prev;
	end
	if (
		( R20_expected_prev !== 1'bx ) && ( R20_prev !== R20_expected_prev )
		&& ((R20_expected_prev !== last_R20_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R20 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R20_expected_prev);
		$display ("     Real value = %b", R20_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_R20_exp = R20_expected_prev;
	end
	if (
		( R21_expected_prev !== 1'bx ) && ( R21_prev !== R21_expected_prev )
		&& ((R21_expected_prev !== last_R21_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R21 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R21_expected_prev);
		$display ("     Real value = %b", R21_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_R21_exp = R21_expected_prev;
	end
	if (
		( R22_expected_prev !== 1'bx ) && ( R22_prev !== R22_expected_prev )
		&& ((R22_expected_prev !== last_R22_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R22 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R22_expected_prev);
		$display ("     Real value = %b", R22_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_R22_exp = R22_expected_prev;
	end
	if (
		( R23_expected_prev !== 1'bx ) && ( R23_prev !== R23_expected_prev )
		&& ((R23_expected_prev !== last_R23_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R23 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R23_expected_prev);
		$display ("     Real value = %b", R23_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_R23_exp = R23_expected_prev;
	end
	if (
		( romA0_expected_prev !== 1'bx ) && ( romA0_prev !== romA0_expected_prev )
		&& ((romA0_expected_prev !== last_romA0_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port romA0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", romA0_expected_prev);
		$display ("     Real value = %b", romA0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_romA0_exp = romA0_expected_prev;
	end
	if (
		( romA1_expected_prev !== 1'bx ) && ( romA1_prev !== romA1_expected_prev )
		&& ((romA1_expected_prev !== last_romA1_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port romA1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", romA1_expected_prev);
		$display ("     Real value = %b", romA1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_romA1_exp = romA1_expected_prev;
	end
	if (
		( romA2_expected_prev !== 1'bx ) && ( romA2_prev !== romA2_expected_prev )
		&& ((romA2_expected_prev !== last_romA2_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port romA2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", romA2_expected_prev);
		$display ("     Real value = %b", romA2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_romA2_exp = romA2_expected_prev;
	end
	if (
		( romA3_expected_prev !== 1'bx ) && ( romA3_prev !== romA3_expected_prev )
		&& ((romA3_expected_prev !== last_romA3_exp) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port romA3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", romA3_expected_prev);
		$display ("     Real value = %b", romA3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_romA3_exp = romA3_expected_prev;
	end
	if (
		( romA6_expected_prev !== 1'bx ) && ( romA6_prev !== romA6_expected_prev )
		&& ((romA6_expected_prev !== last_romA6_exp) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port romA6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", romA6_expected_prev);
		$display ("     Real value = %b", romA6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_romA6_exp = romA6_expected_prev;
	end
	if (
		( romA7_expected_prev !== 1'bx ) && ( romA7_prev !== romA7_expected_prev )
		&& ((romA7_expected_prev !== last_romA7_exp) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port romA7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", romA7_expected_prev);
		$display ("     Real value = %b", romA7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_romA7_exp = romA7_expected_prev;
	end
	if (
		( romA8_expected_prev !== 1'bx ) && ( romA8_prev !== romA8_expected_prev )
		&& ((romA8_expected_prev !== last_romA8_exp) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port romA8 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", romA8_expected_prev);
		$display ("     Real value = %b", romA8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_romA8_exp = romA8_expected_prev;
	end
	if (
		( romA9_expected_prev !== 1'bx ) && ( romA9_prev !== romA9_expected_prev )
		&& ((romA9_expected_prev !== last_romA9_exp) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port romA9 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", romA9_expected_prev);
		$display ("     Real value = %b", romA9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_romA9_exp = romA9_expected_prev;
	end
	if (
		( romA10_expected_prev !== 1'bx ) && ( romA10_prev !== romA10_expected_prev )
		&& ((romA10_expected_prev !== last_romA10_exp) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port romA10 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", romA10_expected_prev);
		$display ("     Real value = %b", romA10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_romA10_exp = romA10_expected_prev;
	end
	if (
		( romA11_expected_prev !== 1'bx ) && ( romA11_prev !== romA11_expected_prev )
		&& ((romA11_expected_prev !== last_romA11_exp) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port romA11 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", romA11_expected_prev);
		$display ("     Real value = %b", romA11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_romA11_exp = romA11_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module 3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLR;
reg CONTINUE;
reg SINGLE;
// wires                                               
wire ALUC0;
wire ALUC1;
wire ALUC2;
wire ALUC3;
wire [7:0] BUS;
wire R00;
wire R01;
wire R02;
wire R03;
wire R10;
wire R11;
wire R12;
wire R13;
wire R20;
wire R21;
wire R22;
wire R23;
wire romA0;
wire romA1;
wire romA2;
wire romA3;
wire romA6;
wire romA7;
wire romA8;
wire romA9;
wire romA10;
wire romA11;

wire sampler;                             

// assign statements (if any)                          
3 i1 (
// port map - connection between master ports and signals/registers   
	.ALUC0(ALUC0),
	.ALUC1(ALUC1),
	.ALUC2(ALUC2),
	.ALUC3(ALUC3),
	.BUS(BUS),
	.CLR(CLR),
	.\CONTINUE (CONTINUE),
	.R00(R00),
	.R01(R01),
	.R02(R02),
	.R03(R03),
	.R10(R10),
	.R11(R11),
	.R12(R12),
	.R13(R13),
	.R20(R20),
	.R21(R21),
	.R22(R22),
	.R23(R23),
	.romA0(romA0),
	.romA1(romA1),
	.romA2(romA2),
	.romA3(romA3),
	.romA6(romA6),
	.romA7(romA7),
	.romA8(romA8),
	.romA9(romA9),
	.romA10(romA10),
	.romA11(romA11),
	.SINGLE(SINGLE)
);

// CLR
initial
begin
	CLR = 1'b1;
end 

// CONTINUE
always
begin
	CONTINUE = 1'b0;
	CONTINUE = #250 1'b1;
	#250;
end 

// SINGLE
initial
begin
	SINGLE = 1'b0;
end 

3_vlg_sample_tst tb_sample (
	.CLR(CLR),
	.CONTINUE(CONTINUE),
	.SINGLE(SINGLE),
	.sampler_tx(sampler)
);

3_vlg_check_tst tb_out(
	.ALUC0(ALUC0),
	.ALUC1(ALUC1),
	.ALUC2(ALUC2),
	.ALUC3(ALUC3),
	.BUS(BUS),
	.R00(R00),
	.R01(R01),
	.R02(R02),
	.R03(R03),
	.R10(R10),
	.R11(R11),
	.R12(R12),
	.R13(R13),
	.R20(R20),
	.R21(R21),
	.R22(R22),
	.R23(R23),
	.romA0(romA0),
	.romA1(romA1),
	.romA2(romA2),
	.romA3(romA3),
	.romA6(romA6),
	.romA7(romA7),
	.romA8(romA8),
	.romA9(romA9),
	.romA10(romA10),
	.romA11(romA11),
	.sampler_rx(sampler)
);
endmodule

